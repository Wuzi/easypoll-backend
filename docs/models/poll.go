// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Poll poll
// swagger:model Poll
type Poll struct {

	// answers
	// Required: true
	Answers []*Answer `json:"answers"`

	// id
	ID float64 `json:"id,omitempty"`

	// question
	// Required: true
	Question *string `json:"question"`

	// votes
	Votes float64 `json:"votes"`
}

// Validate validates this poll
func (m *Poll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuestion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Poll) validateAnswers(formats strfmt.Registry) error {

	if err := validate.Required("answers", "body", m.Answers); err != nil {
		return err
	}

	for i := 0; i < len(m.Answers); i++ {
		if swag.IsZero(m.Answers[i]) { // not required
			continue
		}

		if m.Answers[i] != nil {
			if err := m.Answers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("answers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Poll) validateQuestion(formats strfmt.Registry) error {

	if err := validate.Required("question", "body", m.Question); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Poll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Poll) UnmarshalBinary(b []byte) error {
	var res Poll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
