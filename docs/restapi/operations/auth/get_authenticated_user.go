// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/wunari/easypoll-backend/docs/models"
)

// GetAuthenticatedUserHandlerFunc turns a function with the right signature into a get authenticated user handler
type GetAuthenticatedUserHandlerFunc func(GetAuthenticatedUserParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAuthenticatedUserHandlerFunc) Handle(params GetAuthenticatedUserParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetAuthenticatedUserHandler interface for that can handle valid get authenticated user params
type GetAuthenticatedUserHandler interface {
	Handle(GetAuthenticatedUserParams, *models.User) middleware.Responder
}

// NewGetAuthenticatedUser creates a new http.Handler for the get authenticated user operation
func NewGetAuthenticatedUser(ctx *middleware.Context, handler GetAuthenticatedUserHandler) *GetAuthenticatedUser {
	return &GetAuthenticatedUser{Context: ctx, Handler: handler}
}

/*GetAuthenticatedUser swagger:route GET /user auth getAuthenticatedUser

Get the logged user info

Get the authenticated user account details

*/
type GetAuthenticatedUser struct {
	Context *middleware.Context
	Handler GetAuthenticatedUserHandler
}

func (o *GetAuthenticatedUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAuthenticatedUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAuthenticatedUserOKBody get authenticated user o k body
// swagger:model GetAuthenticatedUserOKBody
type GetAuthenticatedUserOKBody struct {
	models.User
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetAuthenticatedUserOKBody) UnmarshalJSON(raw []byte) error {
	// GetAuthenticatedUserOKBodyAO0
	var getAuthenticatedUserOKBodyAO0 models.User
	if err := swag.ReadJSON(raw, &getAuthenticatedUserOKBodyAO0); err != nil {
		return err
	}
	o.User = getAuthenticatedUserOKBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetAuthenticatedUserOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getAuthenticatedUserOKBodyAO0, err := swag.WriteJSON(o.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getAuthenticatedUserOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get authenticated user o k body
func (o *GetAuthenticatedUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.User
	if err := o.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetAuthenticatedUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAuthenticatedUserOKBody) UnmarshalBinary(b []byte) error {
	var res GetAuthenticatedUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
