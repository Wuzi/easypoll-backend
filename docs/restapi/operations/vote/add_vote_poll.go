// Code generated by go-swagger; DO NOT EDIT.

package vote

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddVotePollHandlerFunc turns a function with the right signature into a add vote poll handler
type AddVotePollHandlerFunc func(AddVotePollParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddVotePollHandlerFunc) Handle(params AddVotePollParams) middleware.Responder {
	return fn(params)
}

// AddVotePollHandler interface for that can handle valid add vote poll params
type AddVotePollHandler interface {
	Handle(AddVotePollParams) middleware.Responder
}

// NewAddVotePoll creates a new http.Handler for the add vote poll operation
func NewAddVotePoll(ctx *middleware.Context, handler AddVotePollHandler) *AddVotePoll {
	return &AddVotePoll{Context: ctx, Handler: handler}
}

/*AddVotePoll swagger:route POST /polls/{id}/votes/{answerId} vote addVotePoll

Votes in a option of a a poll

Adds one vote to an answer of a poll

*/
type AddVotePoll struct {
	Context *middleware.Context
	Handler AddVotePollHandler
}

func (o *AddVotePoll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddVotePollParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
