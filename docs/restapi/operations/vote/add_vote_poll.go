// Code generated by go-swagger; DO NOT EDIT.

package vote

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// AddVotePollHandlerFunc turns a function with the right signature into a add vote poll handler
type AddVotePollHandlerFunc func(AddVotePollParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddVotePollHandlerFunc) Handle(params AddVotePollParams) middleware.Responder {
	return fn(params)
}

// AddVotePollHandler interface for that can handle valid add vote poll params
type AddVotePollHandler interface {
	Handle(AddVotePollParams) middleware.Responder
}

// NewAddVotePoll creates a new http.Handler for the add vote poll operation
func NewAddVotePoll(ctx *middleware.Context, handler AddVotePollHandler) *AddVotePoll {
	return &AddVotePoll{Context: ctx, Handler: handler}
}

/*AddVotePoll swagger:route POST /polls/{id}/votes vote addVotePoll

Votes in answers of a poll

Adds one vote to answers of a poll, the request body is an array with integers, each number is the index of the answer

Sending [1, 3, 2] will add one vote to the 2nd, 4th and 3rd answers of the poll

You can only send more than one value in the array if the poll accepts multiple answers

Repeated numbers will be counted as one


*/
type AddVotePoll struct {
	Context *middleware.Context
	Handler AddVotePollHandler
}

func (o *AddVotePoll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddVotePollParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddVotePollBadRequestBody add vote poll bad request body
// swagger:model AddVotePollBadRequestBody
type AddVotePollBadRequestBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this add vote poll bad request body
func (o *AddVotePollBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddVotePollBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddVotePollBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AddVotePollBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
